* How "far along" is this?
About as much as I want!

* How much work do I need to display a triangle on the screen?
None at all, its already done.

* What are homogenous coordinates for?

Normally when you use a 2x2 matrix it lacks the constants, so if you use a 3x3 matrix and then just use 1 as the third value in the vector it works. 

* How do I represent a polygon?

The naiive idea is to simply create a struct with x/y/z fields.

* When drawing the polygon, can I discard the third value or do I need to divide the other two by it?

For now lets discard, if it looks funny we will divide. 

So far so good... Though all of them are just 1 for now, so it means nothing really. 

* How do I /rotate/ a triangle. 

It involved like, a sinus, didn't it. 

* How does drawing a textured polygon actually work?

1. for each horizontal line between the triangle's top and bottom, get the y of this line
2. compute x_left and x_right for this y
3. find the x and y of the corresponding points on the uv map for this x_left and x_right
4. get an interpolation of all the uv coordinates between those two points (like with drawing a line, but in reverse)
5. draw the pixels between x_left and x_right, sampling the coordinates for the color at every pixel

** How to find a point on the uv map given a corresponding point on the polygon?

We can assume that points a b and c correspond to points a b and c on the uv directly. If you interpolate it to get the values of u and v at every point between highest_point and lowest_point (can this be done easily?) and then between highest_point and middle_point and between middle_point and lowest_point (and then concatenate the u/v values together for those two), then if the numbers somehow add up I could, for each y line of my polygon, find the corresponding x and y coordinates to sample the texture. 

*** How can I make the numbers add up? 

When you interpolate values, the number of returned values will always be the difference between i0 and i1. (This seems to also be able to tell me which I should use as dependent and which as independent variables.)

For the u0 to u2, I want exactly (y2-y0) points, both for u and v.



* Can I re-write the draw_filled_triangle function in such a way that I can actually undestand what it does (and that it sort of generalizes to the textured drawing)?

x01 = x0_to_x1
x12 = x1_to_x2
x02 = x0_to_x2

** How does it know which sides are the short ones?

I guess the side from the highest to the lowest point will always be the longest one?

Ohhh, it means "short" only vertically.

* Can I prevent it from overdrawing to the left side since its actually kinda annoying?

Not only is it annoying, it used to give me very counter-intuitive results.


Hmm, it still seems to pop out for some reason. Oh right, it pops up from the other direction, that makes sense. 

* If I make the UV triangle really big, can I get a repeating pattern for free?

Hm, doesn't quite seem this way. 

* If I rewrite the interpolation to not use allocations, will I get a super-dooper performance boost?
Only one way to find out. 

Hmm, kinda disappointing that I didn't, but I guess its a bit better to not have vectors here anyway.

* Why does it look all bad?

** Is it because of loosing accuracy? 
Sort of, yeah. Turns out you really gotta use floating point numbers for this.

* Why does the shaded triangle disappear when its upside-down?
Same thing happens to the textured triangle as well. 

* What causes the stuttering on my computer?

** Is it input?
Huh, actually it probably is! Every once in a while, it just messes up. 


** How can I fix the stuttering problem with the input?

* Why are the triangles "leaking" sometimes?

